from pyquaternion import Quaternion
from math import sqrt

def diffVectors(v1, v2):
	""" Get rotation Quaternion between 2 vectors """
	v1.normalize(), v2.normalize()

	if(abs(v1.dot(v2)-1) < 0.0001):
    		#parhuzamos, irany marad
		print('azonos')
		return_tuple = (0.0,0.0,0.0,1.0)
		return return_tuple

	elif(abs(v1.dot(v2)+1) < 0.0001):
		print('ellentetes')
		new_q = Quaternion(axis=[0, 1, 0], degrees=180) # (pyquaternion)
		print(new_q)
		return_tuple = (round(new_q[1],6),round(new_q[2],6),round(new_q[3],6),round(new_q[0],6))
		return return_tuple

	else: #altalanos helyzetu vektorok	

		#print(v1,v2)
		v = v1+v2
		#print(v)
		v.normalize()
		#print(v)
		x_vect = v1.cross(v2)
		q_w = sqrt((pow(v1.Length,2)) * (pow(v2.Length,2))) + v1.dot(v2)
		new_q = Quaternion(q_w, x_vect[0], x_vect[1], x_vect[2])                
		return_tuple = (round(new_q[1],6),round(new_q[2],6),round(new_q[3],6),round(new_q[0],6))
		return return_tuple

v1 = App.Vector(2,0,0)
v2 = App.Vector(0,0,-10)

Test= App.ActiveDocument.addObject('PartDesign::Body','test')
Gui.ActiveDocument.getObject(Test.Origin.Name).Visibility = True

pont1 = Test.newObject('PartDesign::Point','pont')
pont1.Placement.Base.x = v1.x
pont1.Placement.Base.y = v1.y
pont1.Placement.Base.z = v1.z

Test2= App.ActiveDocument.addObject('PartDesign::Body','test')
Gui.ActiveDocument.getObject(Test2.Origin.Name).Visibility = True

rot = diffVectors(v1, v2)
print(rot)
App.ActiveDocument.getObject(Test2.Name).Placement.Rotation = rot
